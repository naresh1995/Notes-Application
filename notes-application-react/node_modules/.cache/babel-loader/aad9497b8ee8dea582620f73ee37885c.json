{"ast":null,"code":"import _defineProperty from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/naresh/Documents/Projects/notes-application/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport NoteBlock from './Components/NoteBlock';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip';\nimport { findDOMNode } from 'react-dom';\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nvar WAIT_INTERVAL = 1000;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.titleTimer = null;\n    _this.noteTimer = null;\n\n    _this.renderNote = function (note, index) {\n      return React.createElement(NoteBlock, {\n        note: note,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //Data fetch from server\n    value: function componentWillMount() {\n      Note.fetchNotes({\n        onSuccess: function (data) {\n          this.setState({\n            noteDataFromServer: data.data,\n            loading: false\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      ReactTooltip.hide(findDOMNode(this.refs.expand));\n    }\n  }, {\n    key: \"addNewNote\",\n    value: function addNewNote(previousExpandIndex) {\n      var sample = [{\n        title: \"\",\n        notes: \"\",\n        expand: false\n      }];\n\n      if (previousExpandIndex != -1) {\n        this.minimizeNote(previousExpandIndex);\n      }\n\n      this.setState(_defineProperty({\n        noteDataFromServer: this.state.noteDataFromServer\n      }, \"noteDataFromServer\", sample.concat(this.state.noteDataFromServer)));\n      Note.addNewNote({\n        onSuccess: function (data) {\n          this.state.noteDataFromServer[0].id = data.id;\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    } // renderExpandNote(expandIndex) {\n    //   if(expandIndex != -1) {\n    //     console.log(this.state)\n    //     var notesData = this.state.noteDataFromServer[expandIndex];\n    //     var notes = this.state.noteDataFromServer[expandIndex].notes;\n    //     var versionData = this.state.noteDataFromServer[expandIndex].versionData\n    //     return(\n    //       <div className=\"form-group1\">\n    //         <div className= \"input-container\">\n    //           <input type=\"text\" className=\"input-field1\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, this.state.expandIndex)}/>\n    //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, this.state.expandIndex)}>‚ùå</button>\n    //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Minimize Note Note' data-for='minimize' onClick={this.minimizeNote.bind(this, this.state.expandIndex)}>‚ÜôÔ∏è</button>\n    //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Version History' data-for='history' onClick={this.showVersions.bind(this, this.state.expandIndex)}>üïí</button>\n    //         </div>\n    //         {this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData, expandIndex)}\n    //         <ReactTooltip id='delete'>{}</ReactTooltip>\n    //         <ReactTooltip id='minimize'>{}</ReactTooltip>\n    //         <ReactTooltip id='history'>{}</ReactTooltip>\n    //       </div>\n    //     ) \n    //   }\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"loading....\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex p-3 bg-secondary text-white m-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary btn-sm\",\n          onClick: this.addNewNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"Add New Note\")), this.renderExpandNote(this.state.expandIndex), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        }, this.state.noteDataFromServer.map(this.renderNote.bind(this))), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/naresh/Documents/Projects/notes-application/src/App.js"],"names":["React","Component","Note","NoteBlock","ReactTooltip","findDOMNode","NotificationContainer","NotificationManager","WAIT_INTERVAL","App","props","titleTimer","noteTimer","renderNote","note","index","state","loading","noteDataFromServer","expandIndex","fetchNotes","onSuccess","data","setState","bind","onError","hide","refs","expand","previousExpandIndex","sample","title","notes","minimizeNote","concat","addNewNote","id","renderExpandNote","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport NoteBlock from './Components/NoteBlock';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip'\nimport {findDOMNode} from 'react-dom'\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nconst WAIT_INTERVAL = 1000\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n  }\n\n  titleTimer = null\n  noteTimer = null\n\n  //Data fetch from server\n  componentWillMount() {\n    Note.fetchNotes({\n      onSuccess: function(data) {\n        this.setState({\n          noteDataFromServer: data.data,\n          loading: false\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  componentDidUpdate(){\n    ReactTooltip.hide(findDOMNode(this.refs.expand))\n  }\n\n \n \n \n  addNewNote(previousExpandIndex){\n    var sample =  [{title: \"\", notes: \"\", expand: false }];\n    if(previousExpandIndex != -1){\n      this.minimizeNote(previousExpandIndex);\n    }\n    this.setState({\n      noteDataFromServer :this.state.noteDataFromServer,\n      noteDataFromServer: sample.concat(this.state.noteDataFromServer)\n    })\n    Note.addNewNote({\n      onSuccess: function(data) {\n        this.state.noteDataFromServer[0].id = data.id;\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  // renderExpandNote(expandIndex) {\n  //   if(expandIndex != -1) {\n  //     console.log(this.state)\n  //     var notesData = this.state.noteDataFromServer[expandIndex];\n  //     var notes = this.state.noteDataFromServer[expandIndex].notes;\n  //     var versionData = this.state.noteDataFromServer[expandIndex].versionData\n  //     return(\n  //       <div className=\"form-group1\">\n  //         <div className= \"input-container\">\n  //           <input type=\"text\" className=\"input-field1\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, this.state.expandIndex)}/>\n  //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, this.state.expandIndex)}>‚ùå</button>\n  //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Minimize Note Note' data-for='minimize' onClick={this.minimizeNote.bind(this, this.state.expandIndex)}>‚ÜôÔ∏è</button>\n  //           <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Version History' data-for='history' onClick={this.showVersions.bind(this, this.state.expandIndex)}>üïí</button>\n  //         </div>\n  //         {this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData, expandIndex)}\n  //         <ReactTooltip id='delete'>{}</ReactTooltip>\n  //         <ReactTooltip id='minimize'>{}</ReactTooltip>\n  //         <ReactTooltip id='history'>{}</ReactTooltip>\n  //       </div>\n  //     ) \n  //   }\n  // }\n\n  \n  renderNote = (note, index) => {\n    return <NoteBlock note={note} key={index}/> \n  }\n\n  render() {\n    if(this.state.loading) {\n      return (\n        <div className=\"App\">\n          <p>loading....</p>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n            <div className=\"d-flex p-3 bg-secondary text-white m-2\">  \n              <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={this.addNewNote.bind(this,this.state.expandIndex)}>Add New Note</button>\n            </div>\n            {this.renderExpandNote(this.state.expandIndex)}\n            <div className=\"row\">\n              {this.state.noteDataFromServer.map(this.renderNote.bind(this))}\n            </div> \n            <NotificationContainer/>\n        </div>\n      );  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}