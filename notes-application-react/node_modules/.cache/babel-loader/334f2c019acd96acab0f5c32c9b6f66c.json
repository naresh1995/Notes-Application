{"ast":null,"code":"import _defineProperty from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/naresh/Documents/Projects/notes-application/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip';\nimport { findDOMNode } from 'react-dom';\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nvar WAIT_INTERVAL = 1000;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.titleTimer = null;\n    _this.noteTimer = null;\n\n    _this.renderNote = function (node, index) {\n      return React.createElement(Note, {\n        note: note,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //Data fetch from server\n    value: function componentWillMount() {\n      Note.fetchNotes({\n        onSuccess: function (data) {\n          this.setState({\n            noteDataFromServer: data.data,\n            loading: false\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      ReactTooltip.hide(findDOMNode(this.refs.expand));\n    }\n  }, {\n    key: \"notesChange\",\n    value: function notesChange(index, event) {\n      clearTimeout(this.noteTimer);\n      this.state.noteDataFromServer[index].notes = event.target.value;\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n      this.noteTimer = setTimeout(this.triggerNoteChange.bind(this, index), WAIT_INTERVAL);\n    }\n  }, {\n    key: \"triggerNoteChange\",\n    value: function triggerNoteChange(index) {\n      Note.updateNote({\n        data: {\n          id: this.state.noteDataFromServer[index].id,\n          notes: this.state.noteDataFromServer[index].notes\n        },\n        onSuccess: function (data) {\n          NotificationManager.success(data.message);\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"titleChange\",\n    value: function titleChange(index, event) {\n      clearTimeout(this.titleTimer);\n      var prevIndex = this.state.noteDataFromServer[index].id;\n      this.state.noteDataFromServer[index].title = event.target.value;\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n      this.titleTimer = setTimeout(this.triggerTitleChange.bind(this, index), WAIT_INTERVAL);\n    }\n  }, {\n    key: \"triggerTitleChange\",\n    value: function triggerTitleChange(index) {\n      Note.updateTitle({\n        data: {\n          id: this.state.noteDataFromServer[index].id,\n          title: this.state.noteDataFromServer[index].title\n        },\n        onSuccess: function (data) {\n          NotificationManager.success(data.message);\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"addNewNote\",\n    value: function addNewNote(previousExpandIndex) {\n      var sample = [{\n        title: \"\",\n        notes: \"\",\n        expand: false\n      }];\n\n      if (previousExpandIndex != -1) {\n        this.minimizeNote(previousExpandIndex);\n      }\n\n      this.setState(_defineProperty({\n        noteDataFromServer: this.state.noteDataFromServer\n      }, \"noteDataFromServer\", sample.concat(this.state.noteDataFromServer)));\n      Note.addNewNote({\n        onSuccess: function (data) {\n          this.state.noteDataFromServer[0].id = data.id;\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"expandNote\",\n    value: function expandNote(index, previousExpandIndex) {\n      this.state.noteDataFromServer[index].expand = true;\n      this.state.noteDataFromServer[index].showVersions = false;\n\n      if (previousExpandIndex != -1) {\n        this.state.noteDataFromServer[previousExpandIndex].expand = false;\n      }\n\n      this.setState({\n        expandIndex: index,\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n    }\n  }, {\n    key: \"minimizeNote\",\n    value: function minimizeNote(index) {\n      this.state.noteDataFromServer[index].expand = false;\n      this.state.noteDataFromServer[index].showVersions = false;\n      this.setState({\n        expandIndex: -1,\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n    }\n  }, {\n    key: \"deleteNote\",\n    value: function deleteNote(index) {\n      Note.deleteNote({\n        data: {\n          id: this.state.noteDataFromServer[index].id\n        },\n        onSuccess: function (data) {\n          this.state.noteDataFromServer.splice(index, 1);\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer,\n            loading: false\n          });\n          NotificationManager.warning(data.message);\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"showVersions\",\n    value: function showVersions(index) {\n      this.state.noteDataFromServer[index].showVersions = true;\n      Note.getNoteVersions({\n        data: {\n          id: this.state.noteDataFromServer[index].id\n        },\n        onSuccess: function (data) {\n          var versionData = data.data;\n          this.state.noteDataFromServer[index].versionData = versionData;\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"renderNotes\",\n    value: function renderNotes(data, index) {\n      if (!data.expand) {\n        var notesData = this.state.noteDataFromServer[index];\n        var notes = this.state.noteDataFromServer[index].notes;\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"input-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input-field\",\n          name: \"title\",\n          placeholder: \"Note Title\",\n          value: notesData.title,\n          onChange: this.titleChange.bind(this, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button\",\n          ref: \"expand\",\n          \"data-tip\": \"Delete Note\",\n          \"data-for\": \"delete\",\n          onClick: this.deleteNote.bind(this, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, \"\\u274C\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button\",\n          \"data-tip\": \"Expand Note\",\n          \"data-for\": \"expand\",\n          onClick: this.expandNote.bind(this, index, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, \"\\u2197\\uFE0F\")), React.createElement(\"textarea\", {\n          onChange: this.notesChange.bind(this, index),\n          className: \"form-control text-area\",\n          rows: \"10\",\n          value: notes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"expand\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"getSingleNoteData\",\n    value: function getSingleNoteData(data) {\n      this.state.noteDataFromServer[this.state.expandIndex].notes = data.notes;\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n    }\n  }, {\n    key: \"renderSingleVersionBlock\",\n    value: function renderSingleVersionBlock(data, expandIndex) {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-sm\",\n        onClick: this.getSingleNoteData.bind(this, data),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, data.modified_date));\n    }\n  }, {\n    key: \"renderVersionHistory\",\n    value: function renderVersionHistory(versionData, expandIndex) {\n      if (!this.state.noteDataFromServer[expandIndex].showVersions) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, React.createElement(\"textarea\", {\n          onChange: this.notesChange.bind(this, expandIndex),\n          className: \"form-control text-area\",\n          rows: \"15\",\n          value: this.state.noteDataFromServer[expandIndex].notes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"notebox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, React.createElement(\"textarea\", {\n          onChange: this.notesChange.bind(this, expandIndex),\n          className: \"form-control text-area note\",\n          rows: \"15\",\n          value: this.state.noteDataFromServer[expandIndex].notes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"version\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"version-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, \"Version History\"), React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, versionData.map(this.renderSingleVersionBlock.bind(this)))));\n      }\n    }\n  }, {\n    key: \"renderExpandNote\",\n    value: function renderExpandNote(expandIndex) {\n      if (expandIndex != -1) {\n        console.log(this.state);\n        var notesData = this.state.noteDataFromServer[expandIndex];\n        var notes = this.state.noteDataFromServer[expandIndex].notes;\n        var versionData = this.state.noteDataFromServer[expandIndex].versionData;\n        return React.createElement(\"div\", {\n          className: \"form-group1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"input-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input-field1\",\n          name: \"title\",\n          placeholder: \"Note Title\",\n          value: notesData.title,\n          onChange: this.titleChange.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Delete Note\",\n          \"data-for\": \"delete\",\n          onClick: this.deleteNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, \"\\u274C\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Minimize Note Note\",\n          \"data-for\": \"minimize\",\n          onClick: this.minimizeNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, \"\\u2199\\uFE0F\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Version History\",\n          \"data-for\": \"history\",\n          onClick: this.showVersions.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, \"\\uD83D\\uDD52\")), this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData, expandIndex), React.createElement(ReactTooltip, {\n          id: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"minimize\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"history\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, \"loading....\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex p-3 bg-secondary text-white m-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary btn-sm\",\n          onClick: this.addNewNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271\n          },\n          __self: this\n        }, \"Add New Note\")), this.renderExpandNote(this.state.expandIndex), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274\n          },\n          __self: this\n        }, this.state.noteDataFromServer.map(this.renderNote.bind(this)), this.state.noteDataFromServer.map(this.renderNotes.bind(this))), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/naresh/Documents/Projects/notes-application/src/App.js"],"names":["React","Component","Note","ReactTooltip","findDOMNode","NotificationContainer","NotificationManager","WAIT_INTERVAL","App","props","titleTimer","noteTimer","renderNote","node","index","note","state","loading","noteDataFromServer","expandIndex","fetchNotes","onSuccess","data","setState","bind","onError","hide","refs","expand","event","clearTimeout","notes","target","value","setTimeout","triggerNoteChange","updateNote","id","success","message","prevIndex","title","triggerTitleChange","updateTitle","previousExpandIndex","sample","minimizeNote","concat","addNewNote","showVersions","deleteNote","splice","warning","getNoteVersions","versionData","notesData","titleChange","expandNote","notesChange","getSingleNoteData","modified_date","map","renderSingleVersionBlock","console","log","renderVersionHistory","renderExpandNote","renderNotes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip'\nimport {findDOMNode} from 'react-dom'\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nconst WAIT_INTERVAL = 1000\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n  }\n\n  titleTimer = null\n  noteTimer = null\n\n  //Data fetch from server\n  componentWillMount() {\n    Note.fetchNotes({\n      onSuccess: function(data) {\n        this.setState({\n          noteDataFromServer: data.data,\n          loading: false\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  componentDidUpdate(){\n    ReactTooltip.hide(findDOMNode(this.refs.expand))\n  }\n\n  notesChange(index, event) {\n    clearTimeout(this.noteTimer)\n    this.state.noteDataFromServer[index].notes = event.target.value;\n    this.setState({\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n    this.noteTimer = setTimeout(this.triggerNoteChange.bind(this,index), WAIT_INTERVAL)\n  }\n\n  triggerNoteChange(index){\n    Note.updateNote({\n      data:{\n        id:this.state.noteDataFromServer[index].id,\n        notes:this.state.noteDataFromServer[index].notes\n      },\n      onSuccess: function(data) {\n         NotificationManager.success(data.message);\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  titleChange(index, event) {\n    clearTimeout(this.titleTimer)\n    let prevIndex = this.state.noteDataFromServer[index].id;\n    this.state.noteDataFromServer[index].title = event.target.value;\n    this.setState({\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n    this.titleTimer = setTimeout(this.triggerTitleChange.bind(this,index), WAIT_INTERVAL)\n  }\n\n  triggerTitleChange(index) {\n    Note.updateTitle({\n      data:{\n        id:this.state.noteDataFromServer[index].id,\n        title:this.state.noteDataFromServer[index].title\n      },\n      onSuccess: function(data) {\n        NotificationManager.success(data.message);\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  addNewNote(previousExpandIndex){\n    var sample =  [{title: \"\", notes: \"\", expand: false }];\n    if(previousExpandIndex != -1){\n      this.minimizeNote(previousExpandIndex);\n    }\n    this.setState({\n      noteDataFromServer :this.state.noteDataFromServer,\n      noteDataFromServer: sample.concat(this.state.noteDataFromServer)\n    })\n    Note.addNewNote({\n      onSuccess: function(data) {\n        this.state.noteDataFromServer[0].id = data.id;\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  expandNote(index, previousExpandIndex) {\n    this.state.noteDataFromServer[index].expand = true;\n    this.state.noteDataFromServer[index].showVersions = false;\n    if(previousExpandIndex != -1) {\n      this.state.noteDataFromServer[previousExpandIndex].expand = false;  \n    }\n    \n    this.setState({\n      expandIndex: index,\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n  }\n\n  minimizeNote(index) {\n    this.state.noteDataFromServer[index].expand = false;\n    this.state.noteDataFromServer[index].showVersions = false;\n\n    this.setState({\n      expandIndex: -1,\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n  }\n\n  deleteNote(index) {\n      Note.deleteNote({\n        data:{\n          id:this.state.noteDataFromServer[index].id\n        },\n        onSuccess: function(data) {\n          this.state.noteDataFromServer.splice(index,1);\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer,\n            loading: false\n          })\n          NotificationManager.warning(data.message);\n        }.bind(this),\n        onError: function(data) {\n\n        }\n      })\n  }\n\n  showVersions(index){\n    this.state.noteDataFromServer[index].showVersions = true;\n    Note.getNoteVersions({\n      data:{\n        id:this.state.noteDataFromServer[index].id,\n      },\n      onSuccess: function(data) {\n        let versionData = data.data\n        this.state.noteDataFromServer[index].versionData = versionData\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer,\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  renderNotes(data, index) {\n    if(!data.expand) {\n      var notesData = this.state.noteDataFromServer[index];\n      var notes = this.state.noteDataFromServer[index].notes;\n      return(\n        <div key={index} className=\"form-group\">\n          <div className= \"input-container\">\n            <input type=\"text\" className=\"input-field\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, index)}/>\n            <button type=\"button\" className=\"btn btn-sm input-button\" ref = \"expand\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, index)}>❌</button>\n            <button type=\"button\" className=\"btn btn-sm input-button\" data-tip='Expand Note' data-for='expand' onClick={this.expandNote.bind(this, index, this.state.expandIndex)}>↗️</button>\n          </div>\n          <textarea onChange={this.notesChange.bind(this, index)} className=\"form-control text-area\" rows=\"10\" value={notes}/>\n          <ReactTooltip id='delete'>{}</ReactTooltip>\n          <ReactTooltip id='expand'>{}</ReactTooltip>\n        </div>\n      )\n    }\n  }\n\n  getSingleNoteData(data){\n    this.state.noteDataFromServer[this.state.expandIndex].notes = data.notes;\n    this.setState({\n        noteDataFromServer: this.state.noteDataFromServer,\n      })\n  }\n\n  renderSingleVersionBlock(data, expandIndex) {\n    return(\n      <li><button type=\"button\" className=\"btn btn-sm\" onClick={this.getSingleNoteData.bind(this,data)}>{data.modified_date}</button></li>\n    )\n  }\n\n  renderVersionHistory(versionData, expandIndex) {\n    if(!this.state.noteDataFromServer[expandIndex].showVersions){\n      return (\n        <div>\n          <textarea onChange={this.notesChange.bind(this, expandIndex)} className=\"form-control text-area\" rows=\"15\" value={this.state.noteDataFromServer[expandIndex].notes}/>\n        </div>\n      )\n    }\n    else{\n     return(\n      <div className=\"notebox\">\n        <textarea onChange={this.notesChange.bind(this, expandIndex)} className=\"form-control text-area note\" rows=\"15\" value={this.state.noteDataFromServer[expandIndex].notes}/>\n        <div className=\"version\">\n          <h4 className=\"version-header\">Version History</h4>\n          <ul>{versionData.map(this.renderSingleVersionBlock.bind(this))}</ul>\n        </div>\n      </div>\n     )\n    }\n  }\n\n  renderExpandNote(expandIndex) {\n    if(expandIndex != -1) {\n      console.log(this.state)\n      var notesData = this.state.noteDataFromServer[expandIndex];\n      var notes = this.state.noteDataFromServer[expandIndex].notes;\n      var versionData = this.state.noteDataFromServer[expandIndex].versionData\n      return(\n        <div className=\"form-group1\">\n          <div className= \"input-container\">\n            <input type=\"text\" className=\"input-field1\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, this.state.expandIndex)}/>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, this.state.expandIndex)}>❌</button>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Minimize Note Note' data-for='minimize' onClick={this.minimizeNote.bind(this, this.state.expandIndex)}>↙️</button>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Version History' data-for='history' onClick={this.showVersions.bind(this, this.state.expandIndex)}>🕒</button>\n          </div>\n          {this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData, expandIndex)}\n          <ReactTooltip id='delete'>{}</ReactTooltip>\n          <ReactTooltip id='minimize'>{}</ReactTooltip>\n          <ReactTooltip id='history'>{}</ReactTooltip>\n        </div>\n      ) \n    }\n  }\n\n  \n  renderNote = (node, index) => {\n    return <Note note={note} key={index}/> \n  }\n\n  render() {\n    if(this.state.loading) {\n      return (\n        <div className=\"App\">\n          <p>loading....</p>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n            <div className=\"d-flex p-3 bg-secondary text-white m-2\">  \n              <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={this.addNewNote.bind(this,this.state.expandIndex)}>Add New Note</button>\n            </div>\n            {this.renderExpandNote(this.state.expandIndex)}\n            <div className=\"row\">\n              {this.state.noteDataFromServer.map(this.renderNote.bind(this))}\n              {this.state.noteDataFromServer.map(this.renderNotes.bind(this))}\n            </div> \n            <NotificationContainer/>\n        </div>\n      );  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}