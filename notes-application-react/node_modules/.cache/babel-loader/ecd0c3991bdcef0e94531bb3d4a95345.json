{"ast":null,"code":"import _classCallCheck from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/naresh/Documents/Projects/notes-application/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { Note } from './Model';\nimport ReactTooltip from 'react-tooltip';\nimport { findDOMNode } from 'react-dom'; // import 'react-notifications/lib/notifications.css';\n// import 'react-notifications/dist/react-notifications.css';\n// import 'react-notifications/dist/react-notifications.js';\n\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n    return _this;\n  } //Data fetch from server\n\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      Note.fetchNotes({\n        onSuccess: function (data) {\n          this.notificationMessage('Info message');\n          this.setState({\n            noteDataFromServer: data.data,\n            loading: false\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"notificationMessage\",\n    value: function notificationMessage(message) {\n      NotificationManager.info(message);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      ReactTooltip.hide(findDOMNode(this.refs.expand));\n    }\n  }, {\n    key: \"notesChange\",\n    value: function notesChange(index, event) {\n      this.state.noteDataFromServer[index].notes = event.target.value;\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n      Note.updateNote({\n        data: {\n          id: this.state.noteDataFromServer[index].id,\n          notes: this.state.noteDataFromServer[index].notes\n        },\n        onSuccess: function (data) {// this.setState({\n          //   noteDataFromServer: data.data,\n          //   loading: false\n          // })\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"titleChange\",\n    value: function titleChange(index, event) {\n      var prevIndex = this.state.noteDataFromServer[index].id;\n      console.log(prevIndex);\n      this.state.noteDataFromServer[index].title = event.target.value;\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n\n      if (prevIndex) {\n        Note.updateTitle({\n          data: {\n            id: this.state.noteDataFromServer[index].id,\n            title: this.state.noteDataFromServer[index].title\n          },\n          onSuccess: function (data) {\n            alert(\"title updated\");\n            return React.createElement(\"div\", {\n              class: \"alert alert-success\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 89\n              },\n              __self: this\n            }, React.createElement(\"strong\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90\n              },\n              __self: this\n            }, \"Title Updated Succesfully!\"));\n          }.bind(this),\n          onError: function onError(data) {\n            alert(\"title updated\");\n          }\n        });\n      } else {\n        Note.addNewNote({\n          data: {\n            title: this.state.noteDataFromServer[index].title\n          },\n          onSuccess: function (data) {\n            alert(data);\n            this.setState({// this.state.noteDataFromServer[index].id = \n              // noteDataFromServer: data.data,\n            });\n            alert(\"Title Saved\");\n          }.bind(this),\n          onError: function onError(data) {}\n        });\n      }\n    }\n  }, {\n    key: \"addNewNote\",\n    value: function addNewNote() {\n      var sample = [{\n        title: \"\",\n        notes: \"\",\n        expand: false\n      }];\n      this.setState({\n        noteDataFromServer: sample.concat(this.state.noteDataFromServer)\n      });\n    }\n  }, {\n    key: \"expandNote\",\n    value: function expandNote(index, previousExpandIndex) {\n      this.state.noteDataFromServer[index].expand = true;\n      this.state.noteDataFromServer[index].showVersions = false;\n\n      if (previousExpandIndex != -1) {\n        this.state.noteDataFromServer[previousExpandIndex].expand = false;\n      }\n\n      this.setState({\n        expandIndex: index,\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n    }\n  }, {\n    key: \"minimizeNote\",\n    value: function minimizeNote(index) {\n      this.state.noteDataFromServer[index].expand = false;\n      this.setState({\n        expandIndex: -1,\n        noteDataFromServer: this.state.noteDataFromServer\n      });\n    }\n  }, {\n    key: \"deleteNote\",\n    value: function deleteNote(index) {\n      var previousIndex = this.state.noteDataFromServer[index].id;\n\n      if (previousIndex) {\n        Note.deleteNote({\n          data: {\n            id: this.state.noteDataFromServer[index].id\n          },\n          onSuccess: function (data) {\n            this.state.noteDataFromServer.splice(index, 1);\n            this.setState({\n              noteDataFromServer: this.state.noteDataFromServer,\n              loading: false\n            });\n          }.bind(this),\n          onError: function onError(data) {}\n        });\n      } else {\n        this.state.noteDataFromServer.splice(index, 1);\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer,\n          loading: false\n        });\n      }\n    }\n  }, {\n    key: \"showVersions\",\n    value: function showVersions(index) {\n      this.state.noteDataFromServer[index].showVersions = true;\n      Note.getNoteVersions({\n        data: {\n          id: this.state.noteDataFromServer[index].id\n        },\n        onSuccess: function (data) {\n          var versionData = data.data;\n          this.state.noteDataFromServer[index].versionData = versionData;\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n      console.log(this.state);\n    }\n  }, {\n    key: \"renderNotes\",\n    value: function renderNotes(data, index) {\n      if (!data.expand) {\n        var notesData = this.state.noteDataFromServer[index];\n        var notes = this.state.noteDataFromServer[index].notes;\n        return React.createElement(\"div\", {\n          key: index,\n          className: \"form-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"input-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input-field\",\n          name: \"title\",\n          placeholder: \"Note Title\",\n          value: notesData.title,\n          onChange: this.titleChange.bind(this, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button\",\n          ref: \"expand\",\n          \"data-tip\": \"Delete Note\",\n          \"data-for\": \"delete\",\n          onClick: this.deleteNote.bind(this, index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, \"\\u274C\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button\",\n          \"data-tip\": \"Expand Note\",\n          \"data-for\": \"expand\",\n          onClick: this.expandNote.bind(this, index, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206\n          },\n          __self: this\n        }, \"\\u2197\\uFE0F\")), React.createElement(\"textarea\", {\n          onChange: this.notesChange.bind(this, index),\n          className: \"form-control text-area\",\n          rows: \"10\",\n          value: notes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"expand\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"renderSingleVersionBlock\",\n    value: function renderSingleVersionBlock(data, index) {\n      return React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, data.modified_date);\n    }\n  }, {\n    key: \"renderVersionHistory\",\n    value: function renderVersionHistory(versionData) {\n      if (versionData && versionData.length > 0) {\n        return React.createElement(\"div\", {\n          className: \"notebox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, versionData.map(this.renderSingleVersionBlock.bind(this)));\n      }\n    }\n  }, {\n    key: \"renderExpandNote\",\n    value: function renderExpandNote(expandIndex) {\n      if (expandIndex != -1) {\n        var notesData = this.state.noteDataFromServer[expandIndex];\n        var notes = this.state.noteDataFromServer[expandIndex].notes;\n        var versionData = this.state.noteDataFromServer[expandIndex].versionData;\n        return React.createElement(\"div\", {\n          className: \"form-group1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"input-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"text\",\n          className: \"input-field1\",\n          name: \"title\",\n          placeholder: \"Note Title\",\n          value: notesData.title,\n          onChange: this.titleChange.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Delete Note\",\n          \"data-for\": \"delete\",\n          onClick: this.deleteNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, \"\\u274C\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Minimize Note Note\",\n          \"data-for\": \"minimize\",\n          onClick: this.minimizeNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, \"\\u2199\\uFE0F\"), React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-sm input-button1\",\n          \"data-tip\": \"Version History\",\n          \"data-for\": \"history\",\n          onClick: this.showVersions.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, \"\\uD83D\\uDD52\")), React.createElement(\"textarea\", {\n          onChange: this.notesChange.bind(this, expandIndex),\n          className: \"form-control text-area\",\n          rows: \"15\",\n          value: notes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }), this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData), React.createElement(ReactTooltip, {\n          id: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"minimize\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }), React.createElement(ReactTooltip, {\n          id: \"history\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252\n          },\n          __self: this\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263\n          },\n          __self: this\n        }, \"loading....\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex p-3 bg-secondary text-white m-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary btn-sm\",\n          onClick: this.addNewNote.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }, \"Add New Note\")), this.renderExpandNote(this.state.expandIndex), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        }, this.state.noteDataFromServer.map(this.renderNotes.bind(this))), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/naresh/Documents/Projects/notes-application/src/App.js"],"names":["React","Component","Note","ReactTooltip","findDOMNode","NotificationContainer","NotificationManager","App","props","state","loading","noteDataFromServer","expandIndex","fetchNotes","onSuccess","data","notificationMessage","setState","bind","onError","message","info","hide","refs","expand","index","event","notes","target","value","updateNote","id","prevIndex","console","log","title","updateTitle","alert","addNewNote","sample","concat","previousExpandIndex","showVersions","previousIndex","deleteNote","splice","getNoteVersions","versionData","notesData","titleChange","expandNote","notesChange","modified_date","length","map","renderSingleVersionBlock","minimizeNote","renderVersionHistory","renderExpandNote","renderNotes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Note } from './Model';\nimport ReactTooltip from 'react-tooltip'\nimport {findDOMNode} from 'react-dom'\n// import 'react-notifications/lib/notifications.css';\n// import 'react-notifications/dist/react-notifications.css';\n// import 'react-notifications/dist/react-notifications.js';\n\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n  }\n\n  //Data fetch from server\n  componentWillMount() {\n    \n    Note.fetchNotes({\n      onSuccess: function(data) {\n        this.notificationMessage('Info message');\n        this.setState({\n          noteDataFromServer: data.data,\n          loading: false\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  notificationMessage(message) {\n    NotificationManager.info(message);\n  }\n\n  componentDidUpdate(){\n    ReactTooltip.hide(findDOMNode(this.refs.expand))\n  }\n\n  notesChange(index, event) {\n    this.state.noteDataFromServer[index].notes = event.target.value;\n    this.setState({\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n    Note.updateNote({\n      data:{\n        id:this.state.noteDataFromServer[index].id,\n        notes:this.state.noteDataFromServer[index].notes\n      },\n      onSuccess: function(data) {\n        // this.setState({\n        //   noteDataFromServer: data.data,\n        //   loading: false\n        // })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  titleChange(index, event) {\n    let prevIndex = this.state.noteDataFromServer[index].id;\n    console.log(prevIndex)\n    this.state.noteDataFromServer[index].title = event.target.value;\n    this.setState({\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n\n    if(prevIndex){\n      Note.updateTitle({\n        data:{\n          id:this.state.noteDataFromServer[index].id,\n          title:this.state.noteDataFromServer[index].title\n        },\n        onSuccess: function(data) {\n          alert(\"title updated\")\n          return(\n            <div class=\"alert alert-success\">\n              <strong>Title Updated Succesfully!</strong>\n            </div>\n\n          )\n        }.bind(this),\n        onError: function(data) {\n          alert(\"title updated\")\n        }\n      })\n    }\n    else{\n      Note.addNewNote({\n        data:{\n          title:this.state.noteDataFromServer[index].title\n        },\n        onSuccess: function(data) {\n          alert(data)\n          this.setState({\n            // this.state.noteDataFromServer[index].id = \n            // noteDataFromServer: data.data,\n          })\n          alert(\"Title Saved\")\n        }.bind(this),\n        onError: function(data) {\n\n        }\n      })\n    }\n  }\n\n  addNewNote(){\n    var sample =  [{title: \"\", notes: \"\", expand: false }];\n    this.setState({\n      noteDataFromServer: sample.concat(this.state.noteDataFromServer)\n    })\n  }\n\n  expandNote(index, previousExpandIndex) {\n    this.state.noteDataFromServer[index].expand = true;\n    this.state.noteDataFromServer[index].showVersions = false;\n    if(previousExpandIndex != -1) {\n      this.state.noteDataFromServer[previousExpandIndex].expand = false;  \n    }\n    \n    this.setState({\n      expandIndex: index,\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n  }\n\n  minimizeNote(index) {\n    this.state.noteDataFromServer[index].expand = false;\n\n    this.setState({\n      expandIndex: -1,\n      noteDataFromServer: this.state.noteDataFromServer\n    })\n  }\n\n  deleteNote(index) {\n    let previousIndex = this.state.noteDataFromServer[index].id;\n    if(previousIndex){\n      Note.deleteNote({\n        data:{\n          id:this.state.noteDataFromServer[index].id\n        },\n        onSuccess: function(data) {\n          this.state.noteDataFromServer.splice(index,1);\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer,\n            loading: false\n          })\n        }.bind(this),\n        onError: function(data) {\n\n        }\n      })\n    }\n    else{\n      this.state.noteDataFromServer.splice(index,1);\n      this.setState({\n        noteDataFromServer: this.state.noteDataFromServer,\n        loading: false\n      })\n    }\n  }\n\n  showVersions(index){\n    this.state.noteDataFromServer[index].showVersions = true;\n    Note.getNoteVersions({\n      data:{\n        id:this.state.noteDataFromServer[index].id,\n      },\n      onSuccess: function(data) {\n        let versionData = data.data\n        this.state.noteDataFromServer[index].versionData = versionData\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer,\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n      console.log(this.state)\n  }\n\n  renderNotes(data, index) {\n    if(!data.expand) {\n      var notesData = this.state.noteDataFromServer[index];\n      var notes = this.state.noteDataFromServer[index].notes;\n      return(\n        <div key={index} className=\"form-group\">\n          <div className= \"input-container\">\n            <input type=\"text\" className=\"input-field\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, index)}/>\n            <button type=\"button\" className=\"btn btn-sm input-button\" ref = \"expand\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, index)}>❌</button>\n            <button type=\"button\" className=\"btn btn-sm input-button\" data-tip='Expand Note' data-for='expand' onClick={this.expandNote.bind(this, index, this.state.expandIndex)}>↗️</button>\n          </div>\n          <textarea onChange={this.notesChange.bind(this, index)} className=\"form-control text-area\" rows=\"10\" value={notes}/>\n          <ReactTooltip id='delete'>{}</ReactTooltip>\n          <ReactTooltip id='expand'>{}</ReactTooltip>\n        </div>\n      )\n    }\n  }\n\n  renderSingleVersionBlock(data, index) {\n    return(\n      <button>{data.modified_date}</button>\n    )\n  }\n\n  renderVersionHistory(versionData) {\n    if(versionData && versionData.length >0) {\n      return(\n        <div  className=\"notebox\">\n          {versionData.map(this.renderSingleVersionBlock.bind(this))}\n        </div>\n      )  \n    }\n    \n  }        \n\n  renderExpandNote(expandIndex) {\n    if(expandIndex != -1) {\n      var notesData = this.state.noteDataFromServer[expandIndex];\n      var notes = this.state.noteDataFromServer[expandIndex].notes;\n      var versionData = this.state.noteDataFromServer[expandIndex].versionData\n      return(\n        <div className=\"form-group1\">\n          <div className= \"input-container\">\n            <input type=\"text\" className=\"input-field1\" name=\"title\" placeholder=\"Note Title\" value={notesData.title} onChange={this.titleChange.bind(this, this.state.expandIndex)}/>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Delete Note' data-for='delete' onClick={this.deleteNote.bind(this, this.state.expandIndex)}>❌</button>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Minimize Note Note' data-for='minimize' onClick={this.minimizeNote.bind(this, this.state.expandIndex)}>↙️</button>\n            <button type=\"button\" className=\"btn btn-sm input-button1\" data-tip='Version History' data-for='history' onClick={this.showVersions.bind(this, this.state.expandIndex)}>🕒</button>\n          </div>\n\n          <textarea onChange={this.notesChange.bind(this, expandIndex)} className=\"form-control text-area\" rows=\"15\"value={notes}/>\n            {this.renderVersionHistory(this.state.noteDataFromServer[expandIndex].versionData)}\n          <ReactTooltip id='delete'>{}</ReactTooltip>\n          <ReactTooltip id='minimize'>{}</ReactTooltip>\n          <ReactTooltip id='history'>{}</ReactTooltip>\n                       <NotificationContainer/>\n\n        </div>\n      ) \n    }\n  }\n\n  render() {\n    if(this.state.loading) {\n      return (\n        <div className=\"App\">\n          <p>loading....</p>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n            <div className=\"d-flex p-3 bg-secondary text-white m-2\">  \n              <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={this.addNewNote.bind(this)}>Add New Note</button>\n            </div>\n            {this.renderExpandNote(this.state.expandIndex)}\n            <div className=\"row\">\n              {this.state.noteDataFromServer.map(this.renderNotes.bind(this))}\n            </div> \n            <NotificationContainer />\n        </div>\n      );  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}