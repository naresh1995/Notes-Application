{"ast":null,"code":"import _classCallCheck from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\n\nvar Api =\n/*#__PURE__*/\nfunction () {\n  function Api() {\n    _classCallCheck(this, Api);\n  }\n\n  _createClass(Api, null, [{\n    key: \"headers\",\n    value: function headers() {\n      return {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      };\n    }\n  }, {\n    key: \"get\",\n    value: function get(route, params) {\n      return this.xhr(route, params, 'GET');\n    }\n  }, {\n    key: \"post\",\n    value: function post(route, params) {\n      return this.xhr(route, params, 'POST');\n    }\n  }, {\n    key: \"xhr\",\n    value: function xhr(route, params, verb) {\n      var dataOption = {};\n\n      if (params && verb === 'GET') {\n        dataOption['params'] = params;\n      } else {\n        dataOption['data'] = params;\n      }\n\n      var options = Object.assign({\n        method: verb,\n        url: route\n      }, dataOption);\n      options.headers = Api.headers();\n      return axios(options).catch(function (error) {\n        if (error.response) {\n          throw new Error(error.response.data.message);\n        } else if (error.request) {\n          throw new Error(\"Unable to connect to the Internet.\");\n        } else {\n          throw new Error(error.message);\n        }\n      }).then(function (response) {\n        return response;\n      }).then(handleErrors).then(function (responseJson) {\n        return responseJson.data;\n      });\n    }\n  }]);\n\n  return Api;\n}();\n\nfunction handleErrors(response) {\n  if (response.status) {\n    switch (response.status) {\n      case 401:\n        throw new Error(response.message);\n        break;\n\n      case 403:\n        throw new Error(response.message);\n        break;\n\n      case 400:\n        throw new Error(response.message);\n        break;\n    }\n  }\n\n  return response;\n}\n\nexport default Api;","map":{"version":3,"sources":["/Users/naresh/Documents/Projects/notes-application/src/Config/Api.js"],"names":["axios","Api","route","params","xhr","verb","dataOption","options","Object","assign","method","url","headers","catch","error","response","Error","data","message","request","then","handleErrors","responseJson","status"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,G;;;;;;;;;8BACa;AACf,aAAO;AACP,kBAAU,kBADH;AAEL,wBAAgB;AAFX,OAAP;AAID;;;wBAEUC,K,EAAOC,M,EAAQ;AACxB,aAAO,KAAKC,GAAL,CAASF,KAAT,EAAgBC,MAAhB,EAAwB,KAAxB,CAAP;AACD;;;yBAEWD,K,EAAOC,M,EAAQ;AACzB,aAAO,KAAKC,GAAL,CAASF,KAAT,EAAgBC,MAAhB,EAAwB,MAAxB,CAAP;AACD;;;wBAEUD,K,EAAOC,M,EAAQE,I,EAAM;AAC9B,UAAIC,UAAU,GAAG,EAAjB;;AACA,UAAIH,MAAM,IAAIE,IAAI,KAAK,KAAvB,EAA8B;AAC5BC,QAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBH,MAAvB;AACD,OAFD,MAEO;AACLG,QAAAA,UAAU,CAAC,MAAD,CAAV,GAAqBH,MAArB;AACD;;AAED,UAAII,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,QAAAA,MAAM,EAAEL,IAAV;AAAgBM,QAAAA,GAAG,EAAET;AAArB,OAAd,EAA4CI,UAA5C,CAAd;AACAC,MAAAA,OAAO,CAACK,OAAR,GAAkBX,GAAG,CAACW,OAAJ,EAAlB;AAEA,aAAOZ,KAAK,CAACO,OAAD,CAAL,CACJM,KADI,CACE,UAAUC,KAAV,EAAiB;AACtB,YAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB,gBAAM,IAAIC,KAAJ,CAAUF,KAAK,CAACC,QAAN,CAAeE,IAAf,CAAoBC,OAA9B,CAAN;AACD,SAFD,MAEO,IAAIJ,KAAK,CAACK,OAAV,EAAmB;AACxB,gBAAM,IAAIH,KAAJ,CAAU,oCAAV,CAAN;AACD,SAFM,MAEA;AACL,gBAAM,IAAIA,KAAJ,CAAUF,KAAK,CAACI,OAAhB,CAAN;AACD;AACJ,OATM,EAUNE,IAVM,CAUD,UAASL,QAAT,EAAmB;AACvB,eAAOA,QAAP;AACD,OAZM,EAaNK,IAbM,CAaDC,YAbC,EAcND,IAdM,CAcD,UAACE,YAAD,EAAkB;AACtB,eAAOA,YAAY,CAACL,IAApB;AACD,OAhBM,CAAP;AAiBD;;;;;;AAGH,SAASI,YAAT,CAAsBN,QAAtB,EAAgC;AAC9B,MAAIA,QAAQ,CAACQ,MAAb,EAAqB;AACnB,YAAOR,QAAQ,CAACQ,MAAhB;AACE,WAAK,GAAL;AACE,cAAM,IAAIP,KAAJ,CAAUD,QAAQ,CAACG,OAAnB,CAAN;AACA;;AACF,WAAK,GAAL;AACE,cAAM,IAAIF,KAAJ,CAAUD,QAAQ,CAACG,OAAnB,CAAN;AACA;;AACF,WAAK,GAAL;AACE,cAAM,IAAIF,KAAJ,CAAUD,QAAQ,CAACG,OAAnB,CAAN;AACA;AATJ;AAWD;;AACD,SAAOH,QAAP;AACD;;AAED,eAAed,GAAf","sourcesContent":["import axios from 'axios';\n\nclass Api {\n  static headers() {\n    return {\n    'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    }\n  }\n\n  static get(route, params) {\n    return this.xhr(route, params, 'GET');\n  }\n\n  static post(route, params) {\n    return this.xhr(route, params, 'POST')\n  }\n\n  static xhr(route, params, verb) {\n    var dataOption = {};\n    if (params && verb === 'GET') {\n      dataOption['params'] = params;\n    } else {\n      dataOption['data'] = params;\n    }\n        \n    let options = Object.assign({ method: verb, url: route }, dataOption );\n    options.headers = Api.headers();\n\n    return axios(options)\n      .catch(function (error) {\n        if (error.response) {\n          throw new Error(error.response.data.message);\n        } else if (error.request) {\n          throw new Error(\"Unable to connect to the Internet.\");\n        } else {\n          throw new Error(error.message);\n        }\n    })\n    .then(function(response) {\n      return response;\n    })\n    .then(handleErrors)\n    .then((responseJson) => {\n      return responseJson.data;\n    })\n  }\n}\n\nfunction handleErrors(response) {\n  if (response.status) {\n    switch(response.status) {\n      case 401:\n        throw new Error(response.message);\n        break;\n      case 403:\n        throw new Error(response.message);\n        break;\n      case 400:\n        throw new Error(response.message);\n        break;    \n    }\n  }\n  return response;\n}\n\nexport default Api;\n"]},"metadata":{},"sourceType":"module"}