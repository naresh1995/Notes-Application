{"ast":null,"code":"import _defineProperty from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/naresh/Documents/Projects/notes-application/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/naresh/Documents/Projects/notes-application/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport NoteBlock from './Components/NoteBlock';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip';\nimport { findDOMNode } from 'react-dom';\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nvar WAIT_INTERVAL = 1000;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.titleTimer = null;\n    _this.noteTimer = null;\n\n    _this.deleteNote = function (id) {\n      var noteDataFromServer = _this.state.noteDataFromServer;\n\n      var idx = _this.getIndexById(id, noteDataFromServer);\n\n      if (idx > -1) {\n        noteDataFromServer.splice(idx, 1);\n\n        _this.setState({\n          noteDataFromServer: noteDataFromServer\n        });\n      }\n    };\n\n    _this.getIndexById = function (id, array) {\n      for (var i = array.length - 1; i >= 0; i--) {\n        if (array[i].id === id) return i;\n      }\n\n      return -1;\n    };\n\n    _this.renderNote = function (note, index) {\n      return React.createElement(NoteBlock, {\n        note: note,\n        key: index,\n        onDelete: _this.deleteNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    };\n\n    _this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //Data fetch from server\n    value: function componentWillMount() {\n      Note.fetchNotes({\n        onSuccess: function (data) {\n          this.setState({\n            noteDataFromServer: data.data,\n            loading: false\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      ReactTooltip.hide(findDOMNode(this.refs.expand));\n    }\n  }, {\n    key: \"addNewNote\",\n    value: function addNewNote(previousExpandIndex) {\n      var sample = [{\n        title: \"\",\n        notes: \"\",\n        expand: false\n      }];\n\n      if (previousExpandIndex != -1) {\n        this.minimizeNote(previousExpandIndex);\n      }\n\n      this.setState(_defineProperty({\n        noteDataFromServer: this.state.noteDataFromServer\n      }, \"noteDataFromServer\", sample.concat(this.state.noteDataFromServer)));\n      Note.addNewNote({\n        onSuccess: function (data) {\n          this.state.noteDataFromServer[0].id = data.id;\n          this.setState({\n            noteDataFromServer: this.state.noteDataFromServer\n          });\n        }.bind(this),\n        onError: function onError(data) {}\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"loading....\"));\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"d-flex p-3 bg-secondary text-white m-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary btn-sm\",\n          onClick: this.addNewNote.bind(this, this.state.expandIndex),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"Add New Note\")), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, this.state.noteDataFromServer.map(this.renderNote.bind(this))), React.createElement(NotificationContainer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/naresh/Documents/Projects/notes-application/src/App.js"],"names":["React","Component","Note","NoteBlock","ReactTooltip","findDOMNode","NotificationContainer","NotificationManager","WAIT_INTERVAL","App","props","titleTimer","noteTimer","deleteNote","id","noteDataFromServer","state","idx","getIndexById","splice","setState","array","i","length","renderNote","note","index","loading","expandIndex","fetchNotes","onSuccess","data","bind","onError","hide","refs","expand","previousExpandIndex","sample","title","notes","minimizeNote","concat","addNewNote","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Note } from './Model';\nimport NoteBlock from './Components/NoteBlock';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport ReactTooltip from 'react-tooltip'\nimport {findDOMNode} from 'react-dom'\nimport 'react-notifications/lib/notifications.css';\nimport 'react-notifications/dist/react-notifications.css';\nimport 'react-notifications/dist/react-notifications.js';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nconst WAIT_INTERVAL = 1000\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      noteDataFromServer: [],\n      expandIndex: -1\n    };\n  }\n\n  titleTimer = null\n  noteTimer = null\n\n  //Data fetch from server\n  componentWillMount() {\n    Note.fetchNotes({\n      onSuccess: function(data) {\n        this.setState({\n          noteDataFromServer: data.data,\n          loading: false\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n  componentDidUpdate(){\n    ReactTooltip.hide(findDOMNode(this.refs.expand))\n  }\n\n \n  addNewNote(previousExpandIndex){\n    var sample =  [{title: \"\", notes: \"\", expand: false }];\n    if(previousExpandIndex != -1){\n      this.minimizeNote(previousExpandIndex);\n    }\n    this.setState({\n      noteDataFromServer :this.state.noteDataFromServer,\n      noteDataFromServer: sample.concat(this.state.noteDataFromServer)\n    })\n    Note.addNewNote({\n      onSuccess: function(data) {\n        this.state.noteDataFromServer[0].id = data.id;\n        this.setState({\n          noteDataFromServer: this.state.noteDataFromServer\n        })\n      }.bind(this),\n      onError: function(data) {\n\n      }\n    })\n  }\n\n \n  deleteNote = (id) => {\n    let { noteDataFromServer } = this.state;\n    let idx = this.getIndexById(id, noteDataFromServer);\n    if (idx > -1) {\n      noteDataFromServer.splice(idx, 1);\n      this.setState({\n        noteDataFromServer: noteDataFromServer\n      })\n    }\n  }\n\n  getIndexById = (id, array) => {\n    for (var i = array.length - 1; i >= 0; i--) {\n      if (array[i].id === id)\n        return i\n    }\n    return -1;\n  }\n  \n  renderNote = (note, index) => {\n    return <NoteBlock note={note} key={index} onDelete={this.deleteNote}/> \n  }\n\n  render() {\n    if(this.state.loading) {\n      return (\n        <div className=\"App\">\n          <p>loading....</p>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n            <div className=\"d-flex p-3 bg-secondary text-white m-2\">  \n              <button type=\"button\" className=\"btn btn-primary btn-sm\" onClick={this.addNewNote.bind(this,this.state.expandIndex)}>Add New Note</button>\n            </div>\n            <div className=\"row\">\n              {this.state.noteDataFromServer.map(this.renderNote.bind(this))}\n            </div> \n            <NotificationContainer/>\n        </div>\n      );  \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}